#include "../definitions.h"

int main(int argc, char *argv[])
{
	fd_set master;					// master file descriptor list
	FD_ZERO(&master);				// clear the master and temp sets
	
	head=NULL;
	
	int sockfd, portno;			//standard variables, binding & listening same as in sever_multithreading.c file (next 25 lines).
	socklen_t clilen;
	struct sockaddr_in serv_addr, cli_addr;
	
	if (argc < 2)
	{
		fprintf(stderr,"ERROR, no port provided\n");
		exit(1);
	}
	
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0) 
		error("ERROR opening socket");
	
	memset((char *) &serv_addr,0,sizeof(serv_addr));
	portno = atoi(argv[1]);
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(portno);
	
	if (bind(sockfd, (struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) 
		error("ERROR on binding");
	listen(sockfd,5);
	
	clilen = sizeof(cli_addr);
	
	int i,n,fdmax,newfd;
	
	fd_set readfds;
	fdmax=sockfd;
	struct timeval tv;
	FD_ZERO(&readfds);
	FD_SET(sockfd,&master);
	
	while(1)
	{
		readfds=master;
		if (select(fdmax+1, &readfds, NULL, NULL, NULL) == -1)
		{
			perror("select");
			exit(4);
		}
		for(i = 0; i <= fdmax; i++)				//run through the existing connections looking for data to read
		{
			if (FD_ISSET(i, &readfds))
			{ 
				if (i == sockfd)
				{
					newfd= accept(sockfd,(struct sockaddr *) &cli_addr,&clilen);		//handle new connections

					if (newfd == -1)
					{
						perror("accept");
					}
					else
					{
						remove_expired_events();		//removing expired events
						FD_SET(newfd, &master); 		//add to master set
						if (newfd > fdmax)
							fdmax = newfd;				 // keep track of the max
					}
				}
				else
				{
					message *buffer=new message;
					n = read(i,buffer,sizeof(message));
					
					if(n==0)		//it will close connection if no data transfer need to be done
					{
						close(i);
						FD_CLR(i,&master);
						continue;
					}
					else if (n < 0)
						error("ERROR reading from socket");
					
					/*print_buffer(buffer);*/
					
	/*Type 1 to 5 is same as in definitions.h (Commented)*/
		
					if(buffer->type==1)
					{
			
						traverse=head;
						while(traverse!=NULL)
						{
							if(!strcmp(traverse->date,buffer->date) && !strcmp(traverse->name,buffer->name))
							{
								if((atoi(traverse->start_time)<=atoi(buffer->start_time) && atoi(traverse->end_time)>=atoi(buffer->start_time))||(atoi(traverse->start_time)<=atoi(buffer->end_time) && atoi(traverse->end_time)>=atoi(buffer->end_time)))
								{
									n = write(i,"Conflict detected!",18);
									if (n < 0)
										error("ERROR writing to socket");
									break;
								}								
							}
							current=traverse;
							traverse=traverse->next;
						}
						if(traverse==NULL)
						{
							if(head!=NULL)
							{
								message *newmessage=new message;
								newmessage=buffer;
								current->next=newmessage;
								current=current->next;
							}
							else
							{
								head=buffer;
								current=buffer;
							}
							n = write(i,"Event Added!!",13);
							if (n < 0)
								error("ERROR writing to socket");
						}
					}
					else if(buffer->type==2)
					{
						bool flag=0;
						traverse=head;
						while(traverse!=NULL)
						{
							if(!strcmp(traverse->date,buffer->date) && !strcmp(traverse->name,buffer->name) && (atoi(traverse->start_time)==atoi(buffer->start_time)))
							{
									if(traverse==head)
									{
										head=head->next;
										traverse=head;
										n = write(i,"Event Removed!!",15);
										if (n < 0)
											error("ERROR writing to socket");
										break;
									}
									else
									{
										current->next=traverse->next;
										traverse=traverse->next;
										n = write(i,"Event Removed!!",15);
										if (n < 0)
											error("ERROR writing to socket");
										flag=1;
										break;
									}
							}
							else
							{
								current=traverse;
								traverse=traverse->next;
							}
						}
						if(traverse==NULL && !flag)
						{
							n = write(i,"None of event removed!",22);
							if (n < 0)
								error("ERROR writing to socket");
						}
					}
					else if(buffer->type==3)
					{
						traverse=head;
						while(traverse!=NULL)
						{
							if(!strcmp(traverse->date,buffer->date) && !strcmp(traverse->name,buffer->name))
							{
								if(atoi(traverse->start_time)==atoi(buffer->start_time))
								{
									break;
								}
							}
							previous=traverse;
							traverse=traverse->next;
						}
						if(traverse==NULL)
						{
							n = write(i,"None of event updated!",22);
							if (n < 0)
								error("ERROR writing to socket");
						}
						else
						{
							traverse_part=head;
							while(traverse_part!=NULL)
							{
								if(traverse_part==traverse)
								{
									traverse_part=traverse_part->next;
									continue;
								}
								if(!strcmp(traverse_part->date,buffer->date) && !strcmp(traverse_part->name,buffer->name))
								{
									if((atoi(traverse_part->start_time)<=atoi(buffer->start_time) && atoi(traverse_part->end_time)>=atoi(buffer->start_time))||(atoi(traverse_part->start_time)<=atoi(buffer->end_time) && atoi(traverse_part->end_time)>=atoi(buffer->end_time)))
									{
										n = write(i,"Conflict detected!",18);
										if (n < 0)
											error("ERROR writing to socket");
										n = write(i,"None of event updated!",22);
										if (n < 0)
											error("ERROR writing to socket");
										break;
									}
								}
								traverse_part=traverse_part->next;
							}
				
							if(traverse_part==NULL)
							{
								message *newmessage=new message;
								newmessage=buffer;
								if(traverse==head)
								{
									newmessage->next=head->next;
									head=newmessage;
								}
								else if(head!=NULL)
								{
									previous->next=newmessage;
									newmessage->next=traverse->next;
								}
								n = write(i,"Event Updated!!",15);
								if (n < 0)
									error("ERROR writing to socket");
							}
						}
					}
					else if(buffer->type==4)
					{
						traverse=head;
						while(traverse!=NULL)
						{
							if(!strcmp(traverse->date,buffer->date) && !strcmp(traverse->name,buffer->name))
							{
								if(atoi(traverse->start_time)==atoi(buffer->start_time))
								{
									n = write(i,traverse,sizeof(message));
									if (n < 0)
										error("ERROR writing to socket");
									break;
								}
							}
							traverse=traverse->next;
						}
						strcpy(temp->date,"252525");
						n = write(i,temp,sizeof(message));
						if (n < 0)
							error("ERROR writing to socket");
					}
					else if(buffer->type==5)
					{
						traverse=head;
						while(traverse!=NULL)
						{
							if(!strcmp(traverse->date,buffer->date) && !strcmp(traverse->name,buffer->name))
							{
								//p();
								n = write(i,traverse,sizeof(message));
								if (n < 0)
									error("ERROR writing to socket");
							}
							traverse=traverse->next;
						}
						strcpy(temp->date,"252525");
						n = write(i,temp,sizeof(message));
						if (n < 0)
							error("ERROR writing to socket");
					}
					else if(buffer->type==6)			//handling getall functionality.
					{
						traverse=head;
						int count=0;
						while(traverse!=NULL)
						{
							if(!strcmp(traverse->name,buffer->name))
							{
								typesix[i][count++]=*traverse;//storing the messages that is to be sent to client side in getall query from client.
							}
							traverse=traverse->next;
						}
						
						temp->type=count;
						n = write(i,temp,sizeof(message));	//sending the total entries in getall query that is to be sent to client
						if (n < 0)
							error("ERROR writing to socket");
					}
					else if(buffer->type==7)		//acting as member function in getall
					{
						int num=atoi(buffer->name);
						n = write(i,&typesix[i][num],sizeof(message));	//sending the requested entry to client side.
						if (n < 0)
							error("ERROR writing to socket");
					}
				}
			}
		}
	}
	close(sockfd);
return 0; 
}
